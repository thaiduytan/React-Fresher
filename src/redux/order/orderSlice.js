import { createSlice } from "@reduxjs/toolkit";
import { message } from "antd";

const initialState = {
  carts: [],
};

export const orderSlice = createSlice({
  name: "order",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    doAddBookAction: (state, action) => {
      // console.log("action:", action.payload);

      // console.log("state:", state.carts);

      let carts = state.carts;
      const item = action.payload;

      // console.log(JSON.parse(JSON.stringify(state)));
      let idExistIndex = state.carts.findIndex((c) => c._id === item._id);

      // kiểm tra xem nếu quyển sách đã được thêm vào rồi thì không thêm mới nửa, mà chỉ cập nhật số lượng mới
      // hàm if nhỏ để ngăn chặn số đơn hàng vượt quá số lượng book
      if (idExistIndex != -1) {
        carts[idExistIndex].quantity += item.quantity;
        if (carts[idExistIndex].quantity > item.quantity) {
          carts[idExistIndex].quantity = item.quantity;
        }
      } else {
        carts.push({
          quantity: item.quantity,
          _id: item._id,
          detail: item.detail,
        });
      }
      // update redux immer
      state.carts = carts;
      message.success("Sản phẩm đã được thêm vào Giỏ hàng");
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const { doAddBookAction } = orderSlice.actions;

export default orderSlice.reducer;
